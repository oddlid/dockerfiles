FROM docker.io/golang:latest
LABEL maintainer="Odd Eivind Ebbesen <oddebb@gmail.com>"

ARG ARG_TZ="Europe/Stockholm"
ENV TZ=${ARG_TZ}

RUN set -eux; \
	curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg \
	https://packages.cloud.google.com/apt/doc/apt-key.gpg; \
	echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" \
	| tee /etc/apt/sources.list.d/kubernetes.list; \
	sh -c "curl -sL https://deb.nodesource.com/setup_16.x"; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		autoconf \
		automake \
		bc \
		cmake \
		curl \
		doxygen \
		dtach \
		fzf \
		g++ \
		gettext \
		gosu \
		kubectl \
		less \
		libtool \
		libtool-bin \
		ninja-build \
		nodejs \
		npm \
		openssh-client \
		pkg-config \
		ripgrep \
		silversearcher-ag \
		tmux \
		tmux-plugin-manager \
		unzip \
		vim \
		weechat \
		yarn \
		zsh \
	; \
	rm -rf /var/lib/apt/lists/*

RUN set -eux; \
	cd /tmp \
	&& git clone https://github.com/neovim/neovim \
	&& cd neovim \
	&& make \
	&& make install \
	&& cd - \
	&& rm -rf neovim

ARG BAT_VERSION="0.19.0"
ARG GITDELTA_VERSION="0.11.3"
ARG GITMUX_VERSION="0.7.6"
ARG K9S_VERSION="0.25.18"

ENV BAT_VERSION=${BAT_VERSION}
ENV GITDELTA_VERSION=${GITDELTA_VERSION}
ENV GITMUX_VERSION=${GITMUX_VERSION}
ENV K9S_VERSION=${K9S_VERSION}

RUN set eux; \
	arch="$(dpkg --print-architecture)"; arch="${arch##*-}"; \
	cd /tmp \
	&& curl -LO https://github.com/sharkdp/bat/releases/download/v${BAT_VERSION}/bat_${BAT_VERSION}_${arch}.deb \
	&& dpkg -i bat_${BAT_VERSION}_${arch}.deb \
	&& rm -f bat_${BAT_VERSION}_${arch}.deb \
	&& curl -LO https://github.com/dandavison/delta/releases/download/${GITDELTA_VERSION}/git-delta_${GITDELTA_VERSION}_${arch}.deb \
	&& dpkg -i git-delta_${GITDELTA_VERSION}_${arch}.deb \
	&& rm -f git-delta_${GITDELTA_VERSION}_${arch}.deb \
	&& curl -LO https://github.com/arl/gitmux/releases/download/v${GITMUX_VERSION}/gitmux_${GITMUX_VERSION}_linux_${arch}.tar.gz \
	&& tar -xf gitmux_${GITMUX_VERSION}_linux_${arch}.tar.gz \
	&& mv gitmux /usr/local/bin \
	&& rm -f gitmux_${GITMUX_VERSION}_linux_${arch}.tar.gz \
	&& curl -L https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash \
	&& local_arch=${arch}; if [ "$local_arch" = "amd64" ]; then local_arch="x86_64"; fi \
	&& curl -LO https://github.com/derailed/k9s/releases/download/v${K9S_VERSION}/k9s_linux_${local_arch}.tar.gz \
	&& tar -xf k9s_linux_${local_arch}.tar.gz \
	&& mv k9s /usr/local/bin/ \
	&& rm -f k9s_linux_${local_arch}.tar.gz LICENSE README.md

ARG DOCKER_USER_NAME="devenv"
ARG DOCKER_USER_UID="1000"
ARG DOCKER_USER_GID="1000"
ENV DOCKER_USER_NAME=${DOCKER_USER_NAME}
ENV DOCKER_USER_UID=${DOCKER_USER_UID}
ENV DOCKER_USER_GID=${DOCKER_USER_GID}

RUN groupadd -g ${DOCKER_USER_GID} ${DOCKER_USER_NAME} && useradd -o -m -s /usr/bin/zsh -u ${DOCKER_USER_UID} -N -g ${DOCKER_USER_GID} ${DOCKER_USER_NAME}
USER ${DOCKER_USER_NAME}
WORKDIR /home/${DOCKER_USER_NAME}

# Install all go tools vim-go and coc-go needs
RUN go install golang.org/x/tools/...@latest \
	&& go install github.com/klauspost/asmfmt/cmd/asmfmt@latest \
	&& go install github.com/go-delve/delve/cmd/dlv@latest \
	&& go install github.com/kisielk/errcheck@latest \
	&& go install github.com/davidrjenni/reftools/cmd/fillstruct@master \
	&& go install github.com/rogpeppe/godef@latest \
	&& go install golang.org/x/tools/cmd/goimports@master \
	&& go install golang.org/x/lint/golint@master \
	&& go install github.com/mgechev/revive@latest \
	&& go install golang.org/x/tools/gopls@latest \
	&& go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest \
	&& go install honnef.co/go/tools/cmd/staticcheck@latest \
	&& go install github.com/fatih/gomodifytags@latest \
	&& go install golang.org/x/tools/cmd/gorename@master \
	&& go install github.com/jstemmer/gotags@master \
	&& go install golang.org/x/tools/cmd/guru@master \
	&& go install github.com/josharian/impl@master \
	&& go install honnef.co/go/tools/cmd/keyify@master \
	&& go install github.com/fatih/motion@latest \
	&& go install github.com/koron/iferr@master

# Install oh-my-zsh
RUN sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

# Install CoC plugins
RUN mkdir -p ~/.config/coc/extensions \
	&& cd ~/.config/coc/extensions \
	&& ([ -f package.json ] || echo '{"dependencies":{}}'> package.json) \
	&& npm install coc-sh --global-style --ignore-scripts --no-bin-links --no-package-lock --only=prod \
	&& npm install coc-css --global-style --ignore-scripts --no-bin-links --no-package-lock --only=prod \
	&& npm install coc-go --global-style --ignore-scripts --no-bin-links --no-package-lock --only=prod \
	&& npm install coc-html --global-style --ignore-scripts --no-bin-links --no-package-lock --only=prod \
	&& npm install coc-tsserver --global-style --ignore-scripts --no-bin-links --no-package-lock --only=prod \
	&& npm install coc-json --global-style --ignore-scripts --no-bin-links --no-package-lock --only=prod \
	&& npm install coc-markdownlint --global-style --ignore-scripts --no-bin-links --no-package-lock --only=prod \
	&& npm install coc-perl --global-style --ignore-scripts --no-bin-links --no-package-lock --only=prod \
	&& npm install coc-pyright --global-style --ignore-scripts --no-bin-links --no-package-lock --only=prod

# Install vim-plug for nvim
RUN sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim' \
	&& mkdir -p ~/.local/share/nvim/site/pack/coc/start \
	&& cd ~/.local/share/nvim/site/pack/coc/start \
	&& curl --fail -L https://github.com/neoclide/coc.nvim/archive/release.tar.gz | tar xzfv -

# Install vim-plug for vim
RUN sh -c 'curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim' \
	&& mkdir -p ~/.vim/pack/coc/start \
	&& cd ~/.vim/pack/coc/start \
	&& curl --fail -L https://github.com/neoclide/coc.nvim/archive/release.tar.gz | tar xzfv -

# Install tmux plugins
COPY --chown=${DOCKER_USER_NAME}:${DOCKER_USER_NAME} ./tmux.conf .tmux.conf
RUN export TMUX_PLUGIN_MANAGER_PATH=${HOME}/.tmux/plugins \
	&& mkdir -p $TMUX_PLUGIN_MANAGER_PATH \
	&& /usr/share/tmux-plugin-manager/scripts/install_plugins.sh

COPY --chown=${DOCKER_USER_NAME}:${DOCKER_USER_NAME} ./init.vim .config/nvim/
COPY --chown=${DOCKER_USER_NAME}:${DOCKER_USER_NAME} ./init.vim .vimrc
COPY --chown=${DOCKER_USER_NAME}:${DOCKER_USER_NAME} ./dircolors .dircolors
COPY --chown=${DOCKER_USER_NAME}:${DOCKER_USER_NAME} ./zshrc .zshrc
COPY --chown=${DOCKER_USER_NAME}:${DOCKER_USER_NAME} ./devenv.zsh .oh-my-zsh/custom/
COPY --chown=${DOCKER_USER_NAME}:${DOCKER_USER_NAME} ./devenv-gallifrey.zsh-theme .oh-my-zsh/themes/

# Install nvim plugins
RUN nvim +'PlugInstall' +qa --headless

# Install vim plugins
# Ok, so this doesn't work... What to do...?
# RUN vim -E -s +PlugInstall +visual +qall


USER root
ENV SHELL=/usr/bin/zsh
COPY ./entrypoint.sh /
ENTRYPOINT ["/entrypoint.sh"]


